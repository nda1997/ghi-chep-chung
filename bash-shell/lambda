import boto3
import base64
import os

ec2 = boto3.client('ec2')
kms = boto3.client('kms')
ses = boto3.client('ses')

# L·∫•y bi·∫øn m√¥i tr∆∞·ªùng
KMS_KEY_ID = os.environ['KMS_KEY_ID']
EMAIL_SENDER = os.environ['EMAIL_SENDER']
EMAIL_RECIPIENT = os.environ['EMAIL_RECIPIENT']

def encrypt_value(value: str) -> str:
    """M√£ h√≥a b·∫±ng KMS v√† tr·∫£ v·ªÅ base64"""
    response = kms.encrypt(
        KeyId=KMS_KEY_ID,
        Plaintext=value.encode('utf-8')
    )
    return base64.b64encode(response['CiphertextBlob']).decode('utf-8')

def get_name_tag(tags, default='N/A'):
    """T√¨m tag 'Name' trong danh s√°ch tag"""
    for tag in tags:
        if tag['Key'] == 'Name':
            return tag['Value']
    return default

def lambda_handler(event, context):
    # L·∫•y danh s√°ch subnet
    subnets = ec2.describe_subnets()['Subnets']
    vpcs = ec2.describe_vpcs()['Vpcs']

    alert_messages = []

    for subnet in subnets:
        available_ips = subnet['AvailableIpAddressCount']
        subnet_id = subnet['SubnetId']
        vpc_id = subnet['VpcId']
        tags = subnet.get('Tags', [])
        subnet_name = get_name_tag(tags)

        # T√¨m t√™n VPC t·ª´ danh s√°ch VPCs
        vpc_name = 'N/A'
        for vpc in vpcs:
            if vpc['VpcId'] == vpc_id:
                vpc_name = get_name_tag(vpc.get('Tags', []))
                break

        if available_ips < 10:
            encrypted_subnet_id = encrypt_value(subnet_id)
            encrypted_vpc_id = encrypt_value(vpc_id)

            message = f"""
ALERT: Subnet c√≤n d∆∞·ªõi 10 IP

üìõ T√™n Subnet      : {subnet_name}
üîê Subnet ID       : {encrypted_subnet_id}

üåê T√™n VPC         : {vpc_name}
üîê VPC ID          : {encrypted_vpc_id}

üìâ IP c√≤n l·∫°i      : {available_ips}
-------------------------------
"""
            alert_messages.append(message)

    if alert_messages:
        full_message = "\n".join(alert_messages)

        # G·ª≠i mail n·∫øu c√≥ c·∫£nh b√°o
        ses.send_email(
            Source=EMAIL_SENDER,
            Destination={'ToAddresses': [EMAIL_RECIPIENT]},
            Message={
                'Subject': {'Data': 'üîî C·∫£nh b√°o Subnet thi·∫øu IP'},
                'Body': {'Text': {'Data': full_message}}
            }
        )
        print("ƒê√£ g·ª≠i c·∫£nh b√°o qua email.")
    else:
        print("Kh√¥ng c√≥ subnet n√†o c·∫ßn c·∫£nh b√°o.")


{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": [
        "ec2:DescribeSubnets",
        "ec2:DescribeVpcs",
        "ec2:DescribeTags"
      ],
      "Effect": "Allow",
      "Resource": "*"
    },
    {
      "Action": "ses:SendEmail",
      "Effect": "Allow",
      "Resource": "*"
    },
    {
      "Action": "kms:Encrypt",
      "Effect": "Allow",
      "Resource": "arn:aws:kms:your-region:your-account-id:key/your-kms-key-id"
    }
  ]
}
